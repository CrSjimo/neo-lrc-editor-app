name: Generate Bundles and Release
on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

jobs:
  Build:
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]
    
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup devcmd
        uses: ilammy/msvc-dev-cmd@v1

      - name: Install build tools (Windows)
        shell: pwsh
        run: |
          if ((Get-Command "ninja.exe" -ErrorAction SilentlyContinue) -eq $null)
          {
             choco install ninja
          }
          where.exe ninja
          ninja --version
          Write-Output VCPKG_TRIPLET=x64-windows >> $env:GITHUB_ENV
          Write-Output VCPKG_TRIPLET_STATIC=x64-windows-static-md >> $env:GITHUB_ENV
          Write-Output QT_ARCH=win64_msvc2019_64 >> $env:GITHUB_ENV

      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: '6.5.3'
          archives: qtbase qtsvg qtdeclarative qttools
          cache: true

      - name: Restore vcpkg from cache
        id: cache_vcpkg
        uses: actions/cache/restore@v4
        with:
          path: ${{ github.workspace }}/vcpkg
          key: ${{ runner.os }}-vcpkg-${{ hashFiles('**/vcpkg.json') }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-

      - name: Install vcpkg dependencies
        shell: pwsh
        run: |
          if (!(Test-Path vcpkg)) {
            git clone https://github.com/microsoft/vcpkg.git
            cd vcpkg
            ${{ inputs.os == 'windows-latest' && './bootstrap-vcpkg.bat' || 'sh ./bootstrap-vcpkg.sh' }}
          } else {
            cd vcpkg
            git pull origin master
          }
          $env:QT_DIR=$env:Qt6_DIR
          $env:VCPKG_KEEP_ENV_VARS="QT_DIR;Qt6_DIR"
          ./vcpkg install `
            --x-manifest-root=${{ github.workspace }}/lib/talcs/scripts/vcpkg-manifest `
            --x-install-root=./installed `
            --triplet=${{ env.VCPKG_TRIPLET }}
          if (Test-Path -Path buildtrees) {
            Remove-Item -Path buildtrees -Recurse -Force
          }
          if (Test-Path -Path downloads) {
            Remove-Item -Path downloads -Recurse -Force
          }
          if (Test-Path -Path packages) {
            Remove-Item -Path packages -Recurse -Force
          }

      - name: Save vcpkg to cache
        uses: actions/cache/save@v4
        with:
          path: ${{ github.workspace }}/vcpkg
          key: ${{ runner.os }}-vcpkg-${{ hashFiles('**/vcpkg.json') }}

      - name: Set directory variables
        shell: pwsh
        run: |
          Write-Output VCPKG_ROOT_DIR=$(Resolve-Path -Path ./vcpkg) >> $env:GITHUB_ENV

      - name: Build NeoLrcEditorApp
        shell: pwsh
        run: |
          cmake -B build -G Ninja `
            -DCMAKE_BUILD_TYPE=Release `
            -DCMAKE_TOOLCHAIN_FILE="${{ env.VCPKG_ROOT_DIR }}/scripts/buildsystems/vcpkg.cmake" `
            -DVCPKG_APPLOCAL_DEPS:BOOL=TRUE `
            -DVCPKG_APPLOCAL_DEPS:BOOL=TRUE `
            -DTALCS_MIDI:BOOL=OFF `
            -DTALCS_GUI:BOOL=ON `
            -DCMAKE_INSTALL_PREFIX=installed
          cmake --build build --target all
          cmake --build build --target install
          Write-Output NEO_LRC_EDITOR_APP_INSTALLED_DIR=$(Resolve-Path -Path installed) >> $env:GITHUB_ENV

      - name: Set binary name
        shell: pwsh
        run: |
          Write-Output BINARY_NAME=neo-lrc-editor-app-$('${{ env.VCPKG_TRIPLET }}'.replace('osx', 'macos'))-${{ github.ref_type == 'tag' && github.ref_name || github.sha }} >> $env:GITHUB_ENV

      - name: Create installer (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri 'https://raw.githubusercontent.com/jrsoftware/issrc/f59a90485af28067626e60ef7e42336e00ae7472/Files/Languages/Unofficial/ChineseSimplified.isl' -OutFile ChineseSimplified.isl
          Invoke-WebRequest -Uri 'https://raw.githubusercontent.com/jrsoftware/issrc/e5e138e67bacd650650eac489fa861274a4b81ce/Files/Languages/Unofficial/ChineseTraditional.isl' -OutFile ChineseTraditional.isl
          Invoke-WebRequest -Uri "https://www.gnu.org/licenses/gpl-3.0.rtf" -OutFile gpl-3.0.rtf
          
          $content = Get-Content build/CMakeCache.txt
          $variableValues = @{}
          foreach ($line in $content) {
              $pattern = "^\s*(.*):(.*)=(.*)$"
              if ($line -Match $pattern) {
                  $key = $matches[1].Trim()
                  $value = $matches[3].Trim()
                  $variableValues[$key] = $value
              }
          }

          $env:SETUP_APP_NAME = $variableValues.CMAKE_PROJECT_NAME
          $env:SETUP_APP_VERSION = $variableValues.CMAKE_PROJECT_VERSION
          $env:SETUP_APP_INSTALLED_DIR = $env:NEO_LRC_EDITOR_APP_INSTALLED_DIR
          $env:SETUP_MESSAGE_FILES_DIR = Resolve-Path .
          $env:SETUP_OUTPUT_DIR = Resolve-Path .
          $env:SETUP_OUTPUT_FILE_BASE = $env:BINARY_NAME

          ISCC.exe scripts/setup/windows/setup.iss
          Write-Output PACKAGE_PATH=$(Resolve-Path -Path "$env:BINARY_NAME.exe") >> $env:GITHUB_ENV

      - name: Upload release file
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BINARY_NAME }}
          path: ${{ env.PACKAGE_PATH }}

  Release:
    runs-on: ubuntu-latest
    needs: Build
    if: github.event_name == 'push'
    steps:
      - name: Get artifacts
        uses: actions/download-artifact@v4
      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          draft: true
          files: |
            neo-lrc-editor-app-*/*
